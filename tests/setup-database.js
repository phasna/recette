#!/usr/bin/env node

/**
 * Script de configuration automatique de la base de donn√©es
 * Aide √† configurer MySQL pour l'application de gestion des recettes
 */

const mysql = require("mysql2");
const fs = require("fs");
const path = require("path");

// Configuration par d√©faut
const DEFAULT_CONFIG = {
  host: "localhost",
  port: 3306,
  user: "root",
  password: "",
  database: "recipe_app",
};

/**
 * Tester diff√©rentes configurations de connexion
 */
async function testConnection(config) {
  return new Promise((resolve) => {
    const connection = mysql.createConnection(config);

    connection.connect((err) => {
      if (err) {
        resolve({ success: false, error: err.message });
      } else {
        connection.end();
        resolve({ success: true });
      }
    });
  });
}

/**
 * Configuration interactive
 */
async function interactiveSetup() {
  console.log("üîß Configuration de la base de donn√©es MySQL\n");

  const readline = require("readline");
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const question = (prompt) => {
    return new Promise((resolve) => {
      rl.question(prompt, resolve);
    });
  };

  try {
    console.log("Veuillez entrer les informations de connexion MySQL :\n");

    const host =
      (await question(`Host (${DEFAULT_CONFIG.host}): `)) ||
      DEFAULT_CONFIG.host;
    const port =
      (await question(`Port (${DEFAULT_CONFIG.port}): `)) ||
      DEFAULT_CONFIG.port;
    const user =
      (await question(`Utilisateur (${DEFAULT_CONFIG.user}): `)) ||
      DEFAULT_CONFIG.user;
    const password = await question("Mot de passe (laissez vide si aucun): ");
    const database =
      (await question(`Base de donn√©es (${DEFAULT_CONFIG.database}): `)) ||
      DEFAULT_CONFIG.database;

    rl.close();

    const config = { host, port: parseInt(port), user, password, database };

    console.log("\nüß™ Test de connexion...");
    const result = await testConnection(config);

    if (result.success) {
      console.log("‚úÖ Connexion r√©ussie !");

      // Cr√©er la base de donn√©es
      console.log("\nüì¶ Cr√©ation de la base de donn√©es...");
      await createDatabase(config);

      // Mettre √† jour la configuration
      console.log("\n‚öôÔ∏è Mise √† jour de la configuration...");
      await updateConfig(config);

      console.log("\nüéâ Configuration termin√©e avec succ√®s !");
      console.log("‚úÖ Votre application est pr√™te √† √™tre utilis√©e");
    } else {
      console.log("‚ùå √âchec de la connexion:", result.error);
      console.log("\nüîß Solutions possibles :");
      console.log("1. V√©rifiez que MySQL est d√©marr√©");
      console.log("2. V√©rifiez le nom d'utilisateur et le mot de passe");
      console.log("3. V√©rifiez que le port 3306 est libre");
      console.log("4. Consultez DATABASE_SETUP.md pour plus d'aide");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la configuration:", error.message);
  }
}

/**
 * Cr√©er la base de donn√©es et les tables
 */
async function createDatabase(config) {
  return new Promise((resolve, reject) => {
    const connection = mysql.createConnection(config);

    // Cr√©er la base de donn√©es
    connection.query(
      `CREATE DATABASE IF NOT EXISTS ${config.database}`,
      (err) => {
        if (err) {
          console.error("‚ùå Erreur cr√©ation DB:", err.message);
          reject(err);
          return;
        }

        console.log(`‚úÖ Base de donn√©es '${config.database}' cr√©√©e`);

        // S√©lectionner la base de donn√©es
        connection.query(`USE ${config.database}`, (err) => {
          if (err) {
            console.error("‚ùå Erreur s√©lection DB:", err.message);
            reject(err);
            return;
          }

          // Cr√©er la table recipes
          const createTableQuery = `
          CREATE TABLE IF NOT EXISTS recipes (
            id INT AUTO_INCREMENT PRIMARY KEY,
            title VARCHAR(255) NOT NULL,
            description TEXT,
            ingredients TEXT NOT NULL,
            instructions TEXT NOT NULL,
            prep_time INT,
            cook_time INT,
            servings INT,
            difficulty ENUM('Facile', 'Moyen', 'Difficile') DEFAULT 'Facile',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
          )
        `;

          connection.query(createTableQuery, (err) => {
            if (err) {
              console.error("‚ùå Erreur cr√©ation table:", err.message);
              reject(err);
              return;
            }

            console.log("‚úÖ Table 'recipes' cr√©√©e");

            // Ins√©rer des donn√©es d'exemple
            const sampleData = [
              {
                title: "P√¢tes Carbonara",
                description: "Un classique italien cr√©meux et savoureux",
                ingredients:
                  "400g de spaghetti\n200g de pancetta\n4 ≈ìufs\n100g de parmesan",
                instructions:
                  "1. Faire cuire les p√¢tes\n2. Faire revenir la pancetta\n3. M√©langer les ≈ìufs et le parmesan\n4. Servir imm√©diatement",
                prep_time: 15,
                cook_time: 15,
                servings: 4,
                difficulty: "Moyen",
              },
            ];

            connection.query(
              "INSERT IGNORE INTO recipes SET ?",
              sampleData[0],
              (err) => {
                if (err) {
                  console.error("‚ùå Erreur insertion donn√©es:", err.message);
                  reject(err);
                  return;
                }

                console.log("‚úÖ Donn√©es d'exemple ins√©r√©es");
                connection.end();
                resolve();
              }
            );
          });
        });
      }
    );
  });
}

/**
 * Mettre √† jour le fichier de configuration
 */
async function updateConfig(config) {
  const configPath = path.join(__dirname, "backend", "config.js");

  const configContent = `module.exports = {
  database: {
    host: "${config.host}",
    port: ${config.port},
    user: "${config.user}",
    password: "${config.password}",
    database: "${config.database}",
  },
  port: 5000,
};
`;

  try {
    fs.writeFileSync(configPath, configContent);
    console.log("‚úÖ Configuration sauvegard√©e dans backend/config.js");
  } catch (error) {
    console.error("‚ùå Erreur sauvegarde config:", error.message);
  }
}

/**
 * Configuration automatique avec valeurs par d√©faut
 */
async function autoSetup() {
  console.log("üöÄ Configuration automatique de la base de donn√©es\n");

  const configs = [
    { ...DEFAULT_CONFIG, password: "" },
    { ...DEFAULT_CONFIG, password: "root" },
    { ...DEFAULT_CONFIG, password: "password" },
    { ...DEFAULT_CONFIG, password: "admin" },
    { ...DEFAULT_CONFIG, user: "recipe_user", password: "recipe_password" },
  ];

  for (const config of configs) {
    console.log(`üß™ Test avec ${config.user}@${config.host}:${config.port}...`);
    const result = await testConnection(config);

    if (result.success) {
      console.log("‚úÖ Connexion r√©ussie !");

      try {
        await createDatabase(config);
        await updateConfig(config);

        console.log("\nüéâ Configuration automatique r√©ussie !");
        console.log("‚úÖ Votre application est pr√™te √† √™tre utilis√©e");
        return;
      } catch (error) {
        console.error("‚ùå Erreur lors de la configuration:", error.message);
      }
    } else {
      console.log("‚ùå √âchec:", result.error);
    }
  }

  console.log("\n‚ùå Aucune configuration automatique n'a fonctionn√©");
  console.log("üîß Lancez la configuration interactive :");
  console.log("node setup-database.js --interactive");
}

// Point d'entr√©e
async function main() {
  const args = process.argv.slice(2);

  if (args.includes("--interactive") || args.includes("-i")) {
    await interactiveSetup();
  } else {
    await autoSetup();
  }
}

// Ex√©cuter si le script est appel√© directement
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testConnection, createDatabase, updateConfig };
