/**
 * Test de correction de la validation
 * V√©rifie que la validation fonctionne avec des donn√©es minimales
 */

const axios = require("axios");

const BASE_URL = "http://localhost:3000/api";

/**
 * Test avec des donn√©es minimales
 */
async function testMinimalRecipe() {
  console.log("üß™ Test avec des donn√©es minimales...\n");

  try {
    const minimalRecipe = {
      title: "Test",
      description: "Description courte",
      ingredients: "Ingr√©dient 1",
      instructions: "√âtape 1 et 2",
      prep_time: 5,
      cook_time: 10,
      servings: 2,
      difficulty: "Facile",
    };

    console.log("üìù Tentative d'ajout avec donn√©es minimales...");
    console.log(
      `   Titre: "${minimalRecipe.title}" (${minimalRecipe.title.length} caract√®res)`
    );
    console.log(
      `   Ingr√©dients: "${minimalRecipe.ingredients}" (${minimalRecipe.ingredients.length} caract√®res)`
    );
    console.log(
      `   Instructions: "${minimalRecipe.instructions}" (${minimalRecipe.instructions.length} caract√®res)`
    );

    const response = await axios.post(`${BASE_URL}/recipes`, minimalRecipe);

    if (response.status === 201) {
      console.log("‚úÖ Recette minimale cr√©√©e avec succ√®s !");
      console.log(`   ID: ${response.data.id}`);
      console.log(`   Titre: ${response.data.title}`);
      return true;
    } else {
      console.log("‚ùå Erreur lors de la cr√©ation");
      return false;
    }
  } catch (error) {
    console.log("‚ùå Erreur lors du test:");
    if (error.response) {
      console.log(`   Status: ${error.response.status}`);
      console.log(
        `   Message: ${error.response.data.message || error.response.data}`
      );
    } else {
      console.log(`   Erreur: ${error.message}`);
    }
    return false;
  }
}

/**
 * Test avec des donn√©es encore plus minimales
 */
async function testVeryMinimalRecipe() {
  console.log("\nüß™ Test avec des donn√©es tr√®s minimales...\n");

  try {
    const veryMinimalRecipe = {
      title: "A",
      description: "",
      ingredients: "A",
      instructions: "A B C D E",
      prep_time: null,
      cook_time: null,
      servings: null,
      difficulty: "Facile",
    };

    console.log("üìù Tentative d'ajout avec donn√©es tr√®s minimales...");
    console.log(
      `   Titre: "${veryMinimalRecipe.title}" (${veryMinimalRecipe.title.length} caract√®res)`
    );
    console.log(
      `   Ingr√©dients: "${veryMinimalRecipe.ingredients}" (${veryMinimalRecipe.ingredients.length} caract√®res)`
    );
    console.log(
      `   Instructions: "${veryMinimalRecipe.instructions}" (${veryMinimalRecipe.instructions.length} caract√®res)`
    );

    const response = await axios.post(`${BASE_URL}/recipes`, veryMinimalRecipe);

    if (response.status === 201) {
      console.log("‚úÖ Recette tr√®s minimale cr√©√©e avec succ√®s !");
      console.log(`   ID: ${response.data.id}`);
      return true;
    } else {
      console.log("‚ùå Erreur lors de la cr√©ation");
      return false;
    }
  } catch (error) {
    console.log("‚ùå Erreur lors du test:");
    if (error.response) {
      console.log(`   Status: ${error.response.status}`);
      console.log(
        `   Message: ${error.response.data.message || error.response.data}`
      );
    } else {
      console.log(`   Erreur: ${error.message}`);
    }
    return false;
  }
}

/**
 * Instructions pour tester l'interface
 */
function showInterfaceTestInstructions() {
  console.log("\nüéØ INSTRUCTIONS POUR TESTER L'INTERFACE");
  console.log("=" * 60);

  console.log("\nüì± Test avec des donn√©es minimales :");
  console.log("1. Ouvrez http://localhost:5001");
  console.log("2. Cliquez sur 'Ajouter une Recette'");
  console.log("3. Remplissez avec des donn√©es minimales :");
  console.log("   ‚Ä¢ Titre: 'Test' (3 caract√®res)");
  console.log("   ‚Ä¢ Ingr√©dients: 'Ingr√©dient 1' (11 caract√®res)");
  console.log("   ‚Ä¢ Instructions: '√âtape 1 et 2' (12 caract√®res)");
  console.log("4. Cliquez sur 'Sauvegarder'");
  console.log("5. V√©rifiez que √ßa fonctionne !");

  console.log("\n‚úÖ Si √ßa fonctionne :");
  console.log("‚Ä¢ Notification verte de succ√®s");
  console.log("‚Ä¢ Recette ajout√©e √† la liste");
  console.log("‚Ä¢ Plus d'erreur de validation");

  console.log("\n‚ùå Si √ßa ne fonctionne toujours pas :");
  console.log("‚Ä¢ V√©rifiez la console du navigateur (F12)");
  console.log("‚Ä¢ Regardez les messages d'erreur sp√©cifiques");
  console.log("‚Ä¢ Essayez avec des donn√©es encore plus courtes");

  console.log("\nüîß Nouvelles limites de validation :");
  console.log("‚Ä¢ Titre: minimum 3 caract√®res (au lieu de 3)");
  console.log("‚Ä¢ Ingr√©dients: minimum 5 caract√®res (au lieu de 10)");
  console.log("‚Ä¢ Instructions: minimum 10 caract√®res (au lieu de 20)");
}

/**
 * Test complet de correction
 */
async function runValidationFixTest() {
  console.log("üîß Test de correction de la validation\n");
  console.log("=" * 50);

  try {
    // Test avec donn√©es minimales
    const minimalOk = await testMinimalRecipe();

    // Test avec donn√©es tr√®s minimales
    const veryMinimalOk = await testVeryMinimalRecipe();

    console.log("\n" + "=" * 50);
    console.log("üéâ R√âSULTATS DU TEST DE CORRECTION");
    console.log("=" * 50);

    if (minimalOk || veryMinimalOk) {
      console.log("‚úÖ Validation: CORRIG√âE");
      console.log("‚úÖ Donn√©es minimales: ACCEPT√âES");
      console.log("‚úÖ API: FONCTIONNELLE");

      console.log("\nüéØ PROBL√àME DE VALIDATION R√âSOLU !");
      console.log("\nüì± La validation est maintenant plus flexible :");
      console.log("   ‚Ä¢ Ingr√©dients: minimum 5 caract√®res");
      console.log("   ‚Ä¢ Instructions: minimum 10 caract√®res");
      console.log("   ‚Ä¢ Messages d'erreur plus clairs");
      console.log("   ‚Ä¢ Validation c√¥t√© client et serveur");

      showInterfaceTestInstructions();
    } else {
      console.log("‚ùå PROBL√àME PERSISTANT");
      console.log("   ‚Ä¢ V√©rifiez que le backend est d√©marr√©");
      console.log("   ‚Ä¢ V√©rifiez la connexion √† la base de donn√©es");
      console.log("   ‚Ä¢ Red√©marrez l'application");
    }
  } catch (error) {
    console.log("\n‚ùå ERREUR LORS DES TESTS");
    console.log(`   ${error.message}`);
  }
}

// Ex√©cuter les tests
runValidationFixTest();
