/**
 * Test de correction de l'erreur RecipeService
 * V√©rifie que l'erreur de constructeur est corrig√©e
 */

const axios = require("axios");

const BASE_URL = "http://localhost:3000/api";

/**
 * Test d'ajout d'une recette pour v√©rifier la correction
 */
async function testRecipeCreation() {
  console.log("üß™ Test de cr√©ation de recette apr√®s correction...\n");

  try {
    const testRecipe = {
      title: "Test Correction Erreur",
      description:
        "Recette pour tester la correction de l'erreur RecipeService",
      ingredients:
        "1 ingr√©dient de test\n2 ingr√©dients de test\n3 ingr√©dients de test",
      instructions:
        "1. Premi√®re √©tape de test\n2. Deuxi√®me √©tape de test\n3. Troisi√®me √©tape de test",
      prep_time: 10,
      cook_time: 15,
      servings: 3,
      difficulty: "Facile",
    };

    console.log("üìù Tentative d'ajout de recette...");
    const response = await axios.post(`${BASE_URL}/recipes`, testRecipe);

    if (response.status === 201) {
      console.log("‚úÖ Recette cr√©√©e avec succ√®s !");
      console.log(`   ID: ${response.data.id}`);
      console.log(`   Titre: ${response.data.title}`);
      console.log(`   Difficult√©: ${response.data.difficulty}`);
      return true;
    } else {
      console.log("‚ùå Erreur lors de la cr√©ation");
      return false;
    }
  } catch (error) {
    console.log("‚ùå Erreur lors du test:");
    if (error.response) {
      console.log(`   Status: ${error.response.status}`);
      console.log(
        `   Message: ${error.response.data.message || error.response.data}`
      );
    } else {
      console.log(`   Erreur: ${error.message}`);
    }
    return false;
  }
}

/**
 * Test de r√©cup√©ration des recettes
 */
async function testGetRecipes() {
  console.log("\nüìö Test de r√©cup√©ration des recettes...\n");

  try {
    const response = await axios.get(`${BASE_URL}/recipes`);

    if (response.status === 200) {
      console.log("‚úÖ R√©cup√©ration r√©ussie");
      console.log(`   Nombre de recettes: ${response.data.length}`);

      if (response.data.length > 0) {
        const latestRecipe = response.data[response.data.length - 1];
        console.log(`   Derni√®re recette: ${latestRecipe.title}`);
      }
      return true;
    } else {
      console.log("‚ùå Erreur lors de la r√©cup√©ration");
      return false;
    }
  } catch (error) {
    console.log("‚ùå Erreur lors de la r√©cup√©ration:");
    console.log(`   ${error.message}`);
    return false;
  }
}

/**
 * Instructions pour tester l'interface
 */
function showInterfaceInstructions() {
  console.log("\nüéØ INSTRUCTIONS POUR TESTER L'INTERFACE");
  console.log("=" * 50);

  console.log("\nüì± √âtapes √† suivre :");
  console.log("1. Ouvrez votre navigateur");
  console.log("2. Allez sur http://localhost:5001");
  console.log("3. V√©rifiez que l'application se charge sans erreur");
  console.log("4. Cherchez le bouton 'Ajouter une Recette'");
  console.log("5. Cliquez sur le bouton pour ouvrir le formulaire");
  console.log("6. Remplissez le formulaire et sauvegardez");

  console.log("\nüîç Le bouton doit √™tre visible :");
  console.log("‚Ä¢ En haut de la page (bouton bleu avec ‚ûï)");
  console.log("‚Ä¢ Au centre si aucune recette (bouton vert avec ‚ûï)");

  console.log("\n‚úÖ Si tout fonctionne :");
  console.log("‚Ä¢ L'application se charge sans erreur dans la console");
  console.log("‚Ä¢ Le bouton est visible et cliquable");
  console.log("‚Ä¢ Le formulaire s'ouvre quand vous cliquez");
  console.log("‚Ä¢ Vous pouvez ajouter une recette");

  console.log("\n‚ùå Si il y a encore des erreurs :");
  console.log("‚Ä¢ V√©rifiez la console du navigateur (F12)");
  console.log("‚Ä¢ Red√©marrez l'application si n√©cessaire");
  console.log("‚Ä¢ V√©rifiez que tous les services sont d√©marr√©s");
}

/**
 * Test complet de correction
 */
async function runFixTest() {
  console.log("üîß Test de correction de l'erreur RecipeService\n");
  console.log("=" * 50);

  try {
    // Test de cr√©ation de recette
    const createOk = await testRecipeCreation();

    // Test de r√©cup√©ration
    const getOk = await testGetRecipes();

    console.log("\n" + "=" * 50);
    console.log("üéâ R√âSULTATS DU TEST DE CORRECTION");
    console.log("=" * 50);

    if (createOk && getOk) {
      console.log("‚úÖ API Backend: FONCTIONNELLE");
      console.log("‚úÖ Cr√©ation de recettes: OP√âRATIONNELLE");
      console.log("‚úÖ R√©cup√©ration de recettes: OP√âRATIONNELLE");

      console.log("\nüéØ ERREUR RECIPESERVICE CORRIG√âE !");
      console.log(
        "\nüì± L'interface utilisateur devrait maintenant fonctionner :"
      );
      console.log("   ‚Ä¢ Plus d'erreur 'not a constructor'");
      console.log("   ‚Ä¢ Le bouton 'Ajouter une Recette' est visible");
      console.log("   ‚Ä¢ Le formulaire s'ouvre correctement");
      console.log("   ‚Ä¢ Vous pouvez ajouter des recettes");

      showInterfaceInstructions();
    } else {
      console.log("‚ùå PROBL√àME PERSISTANT");
      console.log("   ‚Ä¢ V√©rifiez que le backend est d√©marr√©");
      console.log("   ‚Ä¢ V√©rifiez la connexion √† la base de donn√©es");
      console.log("   ‚Ä¢ Red√©marrez l'application");
    }
  } catch (error) {
    console.log("\n‚ùå ERREUR LORS DU TEST");
    console.log(`   ${error.message}`);
  }
}

// Ex√©cuter le test
runFixTest();
