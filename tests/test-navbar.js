/**
 * Script de test pour la navbar
 * √Ä ex√©cuter dans la console du navigateur
 */

console.log("üß™ Test de la navbar...");

// Test des √©v√©nements
const testEvents = () => {
  console.log("üì° Test des √©v√©nements personnalis√©s...");

  // Test √©v√©nement connexion
  console.log("üîê D√©clenchement de l'√©v√©nement openLoginForm...");
  const loginEvent = new CustomEvent("openLoginForm");
  window.dispatchEvent(loginEvent);

  setTimeout(() => {
    console.log("üìù D√©clenchement de l'√©v√©nement openRegisterForm...");
    const registerEvent = new CustomEvent("openRegisterForm");
    window.dispatchEvent(registerEvent);
  }, 2000);
};

// Test de connexion automatique
const testAutoConnection = async () => {
  console.log("üß™ Test de connexion automatique...");

  try {
    // Cr√©er un utilisateur de test
    const registerResponse = await fetch(
      "http://localhost:3000/api/users/register",
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          username: "testuser",
          email: "test@example.com",
          password: "password123",
          first_name: "Test",
          last_name: "User",
        }),
      }
    );

    if (registerResponse.ok) {
      console.log("‚úÖ Utilisateur cr√©√©");
    } else {
      const error = await registerResponse.json();
      if (!error.message?.includes("d√©j√†")) {
        console.error("‚ùå Erreur cr√©ation:", error);
        return;
      }
    }

    // Se connecter
    const loginResponse = await fetch("http://localhost:3000/api/users/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        email: "test@example.com",
        password: "password123",
      }),
    });

    if (loginResponse.ok) {
      const data = await loginResponse.json();
      localStorage.setItem("token", data.token);
      localStorage.setItem("user", JSON.stringify(data.user));
      console.log("‚úÖ Connexion r√©ussie !");
      alert("‚úÖ Connexion automatique r√©ussie ! Rechargez la page.");
      window.location.reload();
    } else {
      const error = await loginResponse.json();
      console.error("‚ùå Erreur de connexion:", error);
    }
  } catch (error) {
    console.error("‚ùå Erreur:", error);
  }
};

// Menu de test
console.log(`
üß™ MENU DE TEST NAVBAR
=====================

1. Test des √©v√©nements (formulaires)
2. Test de connexion automatique
3. V√©rifier l'√©tat actuel

Choisissez une option:
- testEvents() pour tester les formulaires
- testAutoConnection() pour connexion automatique
- localStorage.getItem('user') pour v√©rifier l'√©tat
`);

// Exporter les fonctions
window.testEvents = testEvents;
window.testAutoConnection = testAutoConnection;
