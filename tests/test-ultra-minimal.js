/**
 * Test avec des donn√©es ultra-minimales
 * V√©rifie que "ddd" et "dd" passent la validation
 */

const axios = require("axios");

const BASE_URL = "http://localhost:3000/api";

/**
 * Test avec des donn√©es ultra-minimales comme dans l'interface
 */
async function testUltraMinimalRecipe() {
  console.log("üß™ Test avec des donn√©es ultra-minimales...\n");

  try {
    const ultraMinimalRecipe = {
      title: "pate au cr√™me",
      description: "ddd",
      ingredients: "ddd",
      instructions: "dd",
      prep_time: 11,
      cook_time: 39,
      servings: 3,
      difficulty: "Facile",
    };

    console.log("üìù Tentative d'ajout avec donn√©es ultra-minimales...");
    console.log(
      `   Titre: "${ultraMinimalRecipe.title}" (${ultraMinimalRecipe.title.length} caract√®res)`
    );
    console.log(
      `   Ingr√©dients: "${ultraMinimalRecipe.ingredients}" (${ultraMinimalRecipe.ingredients.length} caract√®res)`
    );
    console.log(
      `   Instructions: "${ultraMinimalRecipe.instructions}" (${ultraMinimalRecipe.instructions.length} caract√®res)`
    );

    const response = await axios.post(
      `${BASE_URL}/recipes`,
      ultraMinimalRecipe
    );

    if (response.status === 201) {
      console.log("‚úÖ Recette ultra-minimale cr√©√©e avec succ√®s !");
      console.log(`   ID: ${response.data.id}`);
      console.log(`   Titre: ${response.data.title}`);
      return true;
    } else {
      console.log("‚ùå Erreur lors de la cr√©ation");
      return false;
    }
  } catch (error) {
    console.log("‚ùå Erreur lors du test:");
    if (error.response) {
      console.log(`   Status: ${error.response.status}`);
      console.log(
        `   Message: ${error.response.data.message || error.response.data}`
      );
    } else {
      console.log(`   Erreur: ${error.message}`);
    }
    return false;
  }
}

/**
 * Instructions pour tester l'interface
 */
function showUltraMinimalTestInstructions() {
  console.log("\nüéØ INSTRUCTIONS POUR TESTER L'INTERFACE");
  console.log("=" * 60);

  console.log("\nüì± Test avec vos donn√©es exactes :");
  console.log("1. Ouvrez http://localhost:5001");
  console.log("2. Cliquez sur 'Ajouter une Recette'");
  console.log("3. Remplissez avec vos donn√©es :");
  console.log("   ‚Ä¢ Titre: 'pate au cr√™me'");
  console.log("   ‚Ä¢ Description: 'ddd'");
  console.log("   ‚Ä¢ Ingr√©dients: 'ddd' (3 caract√®res)");
  console.log("   ‚Ä¢ Instructions: 'dd' (2 caract√®res)");
  console.log("   ‚Ä¢ Temps: 11 min pr√©paration, 39 min cuisson");
  console.log("   ‚Ä¢ Portions: 3");
  console.log("   ‚Ä¢ Difficult√©: Facile");
  console.log("4. Cliquez sur 'Sauvegarder'");
  console.log("5. √áa devrait fonctionner maintenant !");

  console.log("\n‚úÖ Nouvelles limites de validation :");
  console.log("‚Ä¢ Titre: minimum 3 caract√®res");
  console.log("‚Ä¢ Ingr√©dients: minimum 3 caract√®res (au lieu de 5)");
  console.log("‚Ä¢ Instructions: minimum 3 caract√®res (au lieu de 10)");

  console.log("\nüéâ R√©sultat attendu :");
  console.log("‚Ä¢ Plus d'erreur de validation");
  console.log("‚Ä¢ Notification verte de succ√®s");
  console.log("‚Ä¢ Recette ajout√©e √† la liste");
}

/**
 * Test complet
 */
async function runUltraMinimalTest() {
  console.log("üîß Test avec donn√©es ultra-minimales\n");
  console.log("=" * 50);

  try {
    const ultraMinimalOk = await testUltraMinimalRecipe();

    console.log("\n" + "=" * 50);
    console.log("üéâ R√âSULTATS DU TEST ULTRA-MINIMAL");
    console.log("=" * 50);

    if (ultraMinimalOk) {
      console.log("‚úÖ Validation: ULTRA-FLEXIBLE");
      console.log("‚úÖ Donn√©es ultra-minimales: ACCEPT√âES");
      console.log("‚úÖ API: FONCTIONNELLE");

      console.log("\nüéØ PROBL√àME DE VALIDATION D√âFINITIVEMENT R√âSOLU !");
      console.log("\nüì± La validation accepte maintenant :");
      console.log("   ‚Ä¢ Ingr√©dients: minimum 3 caract√®res");
      console.log("   ‚Ä¢ Instructions: minimum 3 caract√®res");
      console.log("   ‚Ä¢ Vos donn√©es 'ddd' et 'dd' fonctionnent !");

      showUltraMinimalTestInstructions();
    } else {
      console.log("‚ùå PROBL√àME PERSISTANT");
      console.log("   ‚Ä¢ V√©rifiez que le backend est d√©marr√©");
      console.log("   ‚Ä¢ Red√©marrez l'application");
    }
  } catch (error) {
    console.log("\n‚ùå ERREUR LORS DES TESTS");
    console.log(`   ${error.message}`);
  }
}

// Ex√©cuter les tests
runUltraMinimalTest();
