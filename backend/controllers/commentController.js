import Comment from "../models/Comment.js";

/**
 * Contr√¥leur pour g√©rer les commentaires sur les recettes
 */

/**
 * Cr√©er un nouveau commentaire
 */
export const createComment = async (req, res) => {
  try {
    console.log("üìù Cr√©ation de commentaire - req.body:", req.body);
    console.log("üë§ Utilisateur:", req.user);

    const { recipeId, commentText, rating } = req.body;

    if (!req.user || !req.user.userId) {
      console.log("‚ùå Pas d'utilisateur authentifi√©");
      return res.status(401).json({
        error: "Authentification requise",
      });
    }

    const userId = req.user.userId;

    const comment = new Comment({
      recipe_id: recipeId,
      user_id: userId,
      comment_text: commentText,
      rating: rating || null,
    });

    console.log("üìã Commentaire √† cr√©er:", comment);

    // Valider le commentaire
    const validation = comment.validate();
    if (!validation.isValid) {
      console.log("‚ùå Validation √©chou√©e:", validation.errors);
      return res.status(400).json({
        error: "Donn√©es invalides",
        details: validation.errors,
      });
    }

    const commentId = await comment.create();
    console.log("‚úÖ Commentaire cr√©√© avec ID:", commentId);

    // R√©cup√©rer le commentaire cr√©√© avec les d√©tails de l'utilisateur
    const createdComment = await Comment.findById(commentId);
    console.log("üì§ Commentaire √† retourner:", createdComment);

    res.status(201).json({
      message: "Commentaire ajout√© avec succ√®s",
      comment: createdComment,
      success: true,
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation du commentaire:", error);
    console.error("   Message:", error.message);
    console.error("   Stack:", error.stack);
    res.status(500).json({
      error: "Erreur lors de l'ajout du commentaire",
      details: error.message,
    });
  }
};

/**
 * Mettre √† jour un commentaire
 */
export const updateComment = async (req, res) => {
  try {
    const { commentId } = req.params;
    const { commentText, rating } = req.body;
    const userId = req.user.userId;

    // R√©cup√©rer le commentaire
    const comment = await Comment.findById(parseInt(commentId));

    if (!comment) {
      return res.status(404).json({
        error: "Commentaire non trouv√©",
      });
    }

    // V√©rifier que l'utilisateur est l'auteur du commentaire
    if (comment.user_id !== userId) {
      return res.status(403).json({
        error: "Vous n'√™tes pas autoris√© √† modifier ce commentaire",
      });
    }

    // Mettre √† jour les champs
    comment.comment_text = commentText;
    comment.rating = rating || comment.rating;

    // Valider
    const validation = comment.validate();
    if (!validation.isValid) {
      return res.status(400).json({
        error: "Donn√©es invalides",
        details: validation.errors,
      });
    }

    await comment.update();

    res.json({
      message: "Commentaire modifi√© avec succ√®s",
      comment: comment,
      success: true,
    });
  } catch (error) {
    console.error("Erreur lors de la modification du commentaire:", error);
    res.status(500).json({
      error: "Erreur lors de la modification du commentaire",
    });
  }
};

/**
 * Supprimer un commentaire
 */
export const deleteComment = async (req, res) => {
  try {
    const { commentId } = req.params;
    const userId = req.user.userId;

    console.log("üóëÔ∏è  Suppression commentaire:", { commentId, userId });

    // R√©cup√©rer le commentaire
    const comment = await Comment.findById(parseInt(commentId));

    console.log("üìù Commentaire trouv√©:", comment);

    if (!comment) {
      console.log("‚ùå Commentaire non trouv√©");
      return res.status(404).json({
        error: "Commentaire non trouv√©",
      });
    }

    // V√©rifier que l'utilisateur est l'auteur du commentaire
    console.log("üîç V√©rification:", {
      comment_user_id: comment.user_id,
      request_user_id: userId,
      equal: parseInt(comment.user_id) === parseInt(userId),
    });

    if (parseInt(comment.user_id) !== parseInt(userId)) {
      console.log("‚ùå Utilisateur non autoris√©");
      return res.status(403).json({
        error: "Vous n'√™tes pas autoris√© √† supprimer ce commentaire",
      });
    }

    // Cr√©er une instance de Comment pour utiliser la m√©thode delete
    const commentInstance = new Comment(comment);
    await commentInstance.delete();

    console.log("‚úÖ Commentaire supprim√©");

    res.json({
      message: "Commentaire supprim√© avec succ√®s",
      success: true,
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression du commentaire:", error);
    res.status(500).json({
      error: "Erreur lors de la suppression du commentaire",
      details: error.message,
    });
  }
};

/**
 * R√©cup√©rer les commentaires d'une recette
 */
export const getRecipeComments = async (req, res) => {
  try {
    const { recipeId } = req.params;
    const limit = parseInt(req.query.limit) || 50;

    const comments = await Comment.findByRecipe(parseInt(recipeId), limit);

    res.json({
      comments,
      count: comments.length,
    });
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des commentaires:", error);
    res.status(500).json({
      error: "Erreur lors de la r√©cup√©ration des commentaires",
    });
  }
};

/**
 * R√©cup√©rer les commentaires d'un utilisateur
 */
export const getUserComments = async (req, res) => {
  try {
    const { userId } = req.params;
    const limit = parseInt(req.query.limit) || 50;

    const comments = await Comment.findByUser(parseInt(userId), limit);

    res.json({
      comments,
      count: comments.length,
    });
  } catch (error) {
    console.error(
      "Erreur lors de la r√©cup√©ration des commentaires de l'utilisateur:",
      error
    );
    res.status(500).json({
      error: "Erreur lors de la r√©cup√©ration des commentaires",
    });
  }
};

/**
 * Liker un commentaire
 */
export const likeComment = async (req, res) => {
  try {
    const { commentId } = req.params;
    const userId = req.user.userId;

    await Comment.like(parseInt(commentId), userId);

    res.json({
      message: "Commentaire lik√©",
      success: true,
    });
  } catch (error) {
    console.error("Erreur lors du like:", error);
    if (error.message.includes("d√©j√† lik√©")) {
      res.status(400).json({
        error: error.message,
      });
    } else {
      res.status(500).json({
        error: "Erreur lors du like du commentaire",
      });
    }
  }
};

/**
 * Retirer le like d'un commentaire
 */
export const unlikeComment = async (req, res) => {
  try {
    const { commentId } = req.params;
    const userId = req.user.userId;

    const success = await Comment.unlike(parseInt(commentId), userId);

    if (success) {
      res.json({
        message: "Like retir√©",
        success: true,
      });
    } else {
      res.status(404).json({
        error: "Like non trouv√©",
      });
    }
  } catch (error) {
    console.error("Erreur lors du retrait du like:", error);
    res.status(500).json({
      error: "Erreur lors du retrait du like",
    });
  }
};

/**
 * Obtenir les statistiques d'une recette (commentaires et notes)
 */
export const getRecipeStats = async (req, res) => {
  try {
    const { recipeId } = req.params;

    const stats = await Comment.getRecipeStats(parseInt(recipeId));

    res.json(stats);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des statistiques:", error);
    res.status(500).json({
      error: "Erreur lors de la r√©cup√©ration des statistiques",
    });
  }
};

/**
 * R√©cup√©rer les commentaires r√©cents de la communaut√©
 */
export const getRecentCommunityComments = async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 20;

    const comments = await Comment.getRecentCommunityComments(limit);

    res.json({
      comments,
      count: comments.length,
    });
  } catch (error) {
    console.error(
      "Erreur lors de la r√©cup√©ration des commentaires r√©cents:",
      error
    );
    res.status(500).json({
      error: "Erreur lors de la r√©cup√©ration des commentaires r√©cents",
    });
  }
};
