const mysql = require("mysql2");
const config = require("./config");

/**
 * Test de connexion √† la base de donn√©es MySQL
 */
async function testDatabaseConnection() {
  console.log("üß™ Test de connexion √† la base de donn√©es MySQL...\n");

  try {
    // Test de connexion
    console.log("1Ô∏è‚É£ Test de connexion...");
    console.log(`   Host: ${config.database.host}`);
    console.log(`   Port: ${config.database.port}`);
    console.log(`   User: ${config.database.user}`);
    console.log(`   Database: ${config.database.database}`);

    const connection = mysql.createConnection({
      host: config.database.host,
      port: config.database.port,
      user: config.database.user,
      password: config.database.password,
    });

    // Test de connexion
    await new Promise((resolve, reject) => {
      connection.connect((err) => {
        if (err) {
          console.error("‚ùå Erreur de connexion:", err.message);
          reject(err);
        } else {
          console.log("‚úÖ Connexion MySQL r√©ussie !");
          resolve();
        }
      });
    });

    // Test de cr√©ation de base de donn√©es
    console.log("\n2Ô∏è‚É£ Test de cr√©ation de base de donn√©es...");
    await new Promise((resolve, reject) => {
      connection.query(
        `CREATE DATABASE IF NOT EXISTS ${config.database.database}`,
        (err) => {
          if (err) {
            console.error("‚ùå Erreur cr√©ation DB:", err.message);
            reject(err);
          } else {
            console.log(
              `‚úÖ Base de donn√©es '${config.database.database}' cr√©√©e ou existante`
            );
            resolve();
          }
        }
      );
    });

    // Test de s√©lection de base de donn√©es
    console.log("\n3Ô∏è‚É£ Test de s√©lection de base de donn√©es...");
    await new Promise((resolve, reject) => {
      connection.query(`USE ${config.database.database}`, (err) => {
        if (err) {
          console.error("‚ùå Erreur s√©lection DB:", err.message);
          reject(err);
        } else {
          console.log(
            `‚úÖ Base de donn√©es '${config.database.database}' s√©lectionn√©e`
          );
          resolve();
        }
      });
    });

    // Test de cr√©ation de table
    console.log("\n4Ô∏è‚É£ Test de cr√©ation de table...");
    const createTableQuery = `
      CREATE TABLE IF NOT EXISTS recipes (
        id INT AUTO_INCREMENT PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        description TEXT,
        ingredients TEXT NOT NULL,
        instructions TEXT NOT NULL,
        prep_time INT,
        cook_time INT,
        servings INT,
        difficulty ENUM('Facile', 'Moyen', 'Difficile') DEFAULT 'Facile',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
      )
    `;

    await new Promise((resolve, reject) => {
      connection.query(createTableQuery, (err) => {
        if (err) {
          console.error("‚ùå Erreur cr√©ation table:", err.message);
          reject(err);
        } else {
          console.log("‚úÖ Table 'recipes' cr√©√©e ou existante");
          resolve();
        }
      });
    });

    // Test d'insertion
    console.log("\n5Ô∏è‚É£ Test d'insertion de donn√©es...");
    const testRecipe = {
      title: "Test de connexion",
      description: "Recette de test pour la connexion DB",
      ingredients: "Ingr√©dient test",
      instructions: "Instructions test",
      prep_time: 10,
      cook_time: 20,
      servings: 2,
      difficulty: "Facile",
    };

    await new Promise((resolve, reject) => {
      connection.query(
        "INSERT INTO recipes SET ?",
        testRecipe,
        (err, result) => {
          if (err) {
            console.error("‚ùå Erreur insertion:", err.message);
            reject(err);
          } else {
            console.log(
              "‚úÖ Donn√©es ins√©r√©es avec succ√®s (ID:",
              result.insertId,
              ")"
            );
            resolve();
          }
        }
      );
    });

    // Test de s√©lection
    console.log("\n6Ô∏è‚É£ Test de s√©lection de donn√©es...");
    await new Promise((resolve, reject) => {
      connection.query("SELECT * FROM recipes", (err, results) => {
        if (err) {
          console.error("‚ùå Erreur s√©lection:", err.message);
          reject(err);
        } else {
          console.log(`‚úÖ ${results.length} recette(s) trouv√©e(s)`);
          if (results.length > 0) {
            console.log(
              "   Derni√®re recette:",
              results[results.length - 1].title
            );
          }
          resolve();
        }
      });
    });

    // Fermer la connexion
    connection.end();

    console.log("\nüéâ Tous les tests de base de donn√©es sont pass√©s !");
    console.log("‚úÖ MySQL fonctionne correctement sur le port 3306");
    console.log("‚úÖ Base de donn√©es 'recipe_app' pr√™te");
    console.log("‚úÖ Table 'recipes' op√©rationnelle");

    return true;
  } catch (error) {
    console.error(
      "\n‚ùå Erreur lors du test de base de donn√©es:",
      error.message
    );

    console.log("\nüîß Solutions possibles :");
    console.log("1. V√©rifiez que MySQL est d√©marr√©");
    console.log("2. V√©rifiez les param√®tres dans config.js");
    console.log("3. V√©rifiez que le port 3306 est libre");
    console.log("4. V√©rifiez les permissions utilisateur");

    return false;
  }
}

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testDatabaseConnection();
}

module.exports = testDatabaseConnection;
