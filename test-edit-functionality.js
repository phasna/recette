/**
 * Script de test pour la fonctionnalit√© d'√©dition
 * √Ä ex√©cuter dans la console du navigateur
 */

const testEditFunctionality = async () => {
  console.log("üß™ Test de la fonctionnalit√© d'√©dition...");

  try {
    // 1. V√©rifier l'authentification
    const token = localStorage.getItem("token");
    const user = localStorage.getItem("user");

    if (!token || !user) {
      console.log("‚ùå Pas d'authentification - connectez-vous d'abord");
      return;
    }

    const parsedUser = JSON.parse(user);
    console.log(
      "‚úÖ Utilisateur connect√©:",
      parsedUser.username,
      "(ID:",
      parsedUser.id,
      ")"
    );

    // 2. R√©cup√©rer les recettes disponibles
    console.log("\nüîç R√©cup√©ration des recettes...");
    const recipesResponse = await fetch("http://localhost:3000/api/recipes", {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });

    if (!recipesResponse.ok) {
      console.log("‚ùå Erreur lors de la r√©cup√©ration des recettes");
      return;
    }

    const recipesData = await recipesResponse.json();
    console.log("üìù Recettes disponibles:", recipesData.data?.length || 0);

    if (!recipesData.data || recipesData.data.length === 0) {
      console.log("‚ùå Aucune recette disponible pour tester l'√©dition");
      return;
    }

    const firstRecipe = recipesData.data[0];
    console.log(
      "üç≥ Premi√®re recette:",
      firstRecipe.title,
      "(ID:",
      firstRecipe.id,
      ")"
    );

    // 3. Test de l'API d'√©dition
    console.log("\nüîç Test de l'API d'√©dition...");
    const editResponse = await fetch(
      `http://localhost:3000/api/recipes/${firstRecipe.id}`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          title: firstRecipe.title + " (modifi√©)",
          description: firstRecipe.description,
          ingredients: firstRecipe.ingredients,
          instructions: firstRecipe.instructions,
          prep_time: firstRecipe.prep_time,
          cook_time: firstRecipe.cook_time,
          servings: firstRecipe.servings,
          difficulty: firstRecipe.difficulty,
        }),
      }
    );

    console.log("üìä Status de l'√©dition:", editResponse.status);

    if (editResponse.ok) {
      const editData = await editResponse.json();
      console.log("‚úÖ √âdition r√©ussie:", editData);
    } else {
      const errorText = await editResponse.text();
      console.log("‚ùå Erreur d'√©dition:", errorText);
    }

    // 4. Test de l'API de suppression
    console.log("\nüîç Test de l'API de suppression...");
    const deleteResponse = await fetch(
      `http://localhost:3000/api/recipes/${firstRecipe.id}`,
      {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    console.log("üìä Status de la suppression:", deleteResponse.status);

    if (deleteResponse.ok) {
      console.log("‚úÖ Suppression r√©ussie");
    } else {
      const errorText = await deleteResponse.text();
      console.log("‚ùå Erreur de suppression:", errorText);
    }

    // 5. Test des routes
    console.log("\nüß≠ Test des routes...");
    console.log("‚úÖ Route d'√©dition:", `/edit-recipe/${firstRecipe.id}`);
    console.log(
      "‚úÖ Navigation manuelle:",
      `window.location.href = '/edit-recipe/${firstRecipe.id}'`
    );

    // 6. Test des composants
    console.log("\nüß© Test des composants...");
    console.log("‚úÖ EditRecipe: Composant d'√©dition");
    console.log("‚úÖ Formulaire: Champs de modification");
    console.log("‚úÖ Validation: V√©rification des donn√©es");
    console.log("‚úÖ Sauvegarde: API de mise √† jour");

    // 7. Suggestions de test
    console.log("\nüí° Suggestions de test:");
    console.log("1. Cliquer sur le bouton d'√©dition (‚úèÔ∏è) dans le popup");
    console.log("2. V√©rifier que la page d'√©dition s'ouvre");
    console.log("3. Modifier les champs du formulaire");
    console.log("4. Cliquer sur 'Sauvegarder'");
    console.log("5. V√©rifier que les modifications sont sauvegard√©es");

    // 8. Test des fonctionnalit√©s
    console.log("\nüîß Test des fonctionnalit√©s:");
    console.log("‚úÖ Bouton d'√©dition: Visible dans le popup");
    console.log("‚úÖ Navigation: Redirection vers /edit-recipe/:id");
    console.log("‚úÖ Formulaire: Chargement des donn√©es existantes");
    console.log("‚úÖ Sauvegarde: Mise √† jour via API");
    console.log("‚úÖ Retour: Navigation vers le dashboard");

    console.log("\n=== FIN DU TEST ===");
  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error);
  }
};

// Ex√©cuter le test
testEditFunctionality();

// Exporter pour utilisation manuelle
window.testEditFunctionality = testEditFunctionality;
